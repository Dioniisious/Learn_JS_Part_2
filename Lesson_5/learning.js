/*
BDD - behaviour driven development, разработка на базе тестов

Для тестов используется спецификация describe - блок, содержащий варианты
    использования некоторого кода и тестов для этого блока кода.

Внутри спецификации содержится блок it - имеет 2 параметра. 1й описывает,
    какие случаи тестируются, а 2й - функция, проводящая эти тесты.

Внутри этих проводящих тесты функциях содержатся assert. Это функции,
    сверяющие вывод функции с ожидаемым значением.
*/

// Протестируем некоторый список паролей с использованием фреймворка Mocha
// Каждый элемент должен соответствовать конкретному значению

let assert = require("assert");

let passwordList = ["ooo", "uuu", 484, 848, true];

describe("Проверяем, что каждый элемент пароля соответствует требуемому значению", function () {
    it("Проверяем 1й элемент на соответствие", function () {
        assert.equal(passwordList[0], "ooo");
    });
    it("Проверяем 2й элемент на соответствие", function () {
        assert.equal(passwordList[1], "uuu");
    });
    it("Проверяем 3й элемент на соответствие", function () {
        assert.equal(passwordList[2], 484);
    });
    it("Проверяем 4й элемент на соответствие", function () {
        assert.equal(passwordList[3], 848);
    });
    it("Проверяем 5й элемент на соответствие", function () {
        assert.equal(passwordList[4], true);
    });
});

/*
Вот как выглядит ответ, когда часть тестов падает:

  Проверяем, что каждый элемент пароля соответствует требуемому значению
    ✔ Проверяем 1й элемент на соответствие
    1) Проверяем 2й элемент на соответствие
    2) Проверяем 3й элемент на соответствие
    3) Проверяем 4й элемент на соответствие
    ✔ Проверяем 5й элемент на соответствие


  2 passing (8ms)
  3 failing

  1) Проверяем, что каждый элемент пароля соответствует требуемому значению
       Проверяем 2й элемент на соответствие:

      AssertionError [ERR_ASSERTION]: 'uuu' == 'eee'
      + expected - actual

      -uuu
      +eee

      at Context.<anonymous> (learning.js:26:16)
      at processImmediate (node:internal/timers:466:21)

  2) Проверяем, что каждый элемент пароля соответствует требуемому значению
       Проверяем 3й элемент на соответствие:

      AssertionError [ERR_ASSERTION]: 484 == 111
      + expected - actual

      -484
      +111

      at Context.<anonymous> (learning.js:29:16)
      at processImmediate (node:internal/timers:466:21)

  3) Проверяем, что каждый элемент пароля соответствует требуемому значению
       Проверяем 4й элемент на соответствие:

      AssertionError [ERR_ASSERTION]: 848 == 222
      + expected - actual

      -848
      +222

      at Context.<anonymous> (learning.js:32:16)
      at processImmediate (node:internal/timers:466:21)

*/

/*
Вот как выглядит ответ, когда все тесты успешные:

Проверяем, что каждый элемент пароля соответствует требуемому значению
    ✔ Проверяем 1й элемент на соответствие
    ✔ Проверяем 2й элемент на соответствие
    ✔ Проверяем 3й элемент на соответствие
    ✔ Проверяем 4й элемент на соответствие
    ✔ Проверяем 5й элемент на соответствие


  5 passing (6ms)

*/


// Можно улучшить удобство с помощью цикла:

let inputPass = ["ooo", "uuu", 484, 848, true];

describe("Проверяем, что каждый элемент пароля соответствует требуемому значению", function () {

    for (let i = 0; i < passwordList.length; i++) {
        it(`Проверяем ${i}-й элемент на соответствие: ${inputPass[i]}===${passwordList[i]}`, function () {
            assert.equal(inputPass[i], passwordList[i]);
        });
    }
});

/*
Пример неправильных тестов, когда let inputPass = ["rrr", "fff", 179, 593, false];

Проверяем, что каждый элемент пароля соответствует требуемому значению
    1) Проверяем 0-й элемент на соответствие: rrr===ooo
    2) Проверяем 1-й элемент на соответствие: fff===uuu
    3) Проверяем 2-й элемент на соответствие: 179===484
    4) Проверяем 3-й элемент на соответствие: 593===848
    5) Проверяем 4-й элемент на соответствие: false===true


  5 passing (11ms)
  5 failing

  1) Проверяем, что каждый элемент пароля соответствует требуемому значению
       Проверяем 0-й элемент на соответствие: rrr===ooo:

      AssertionError [ERR_ASSERTION]: 'rrr' == 'ooo'
      + expected - actual

      -rrr
      +ooo

      at Context.<anonymous> (learning.js:115:20)
      at processImmediate (node:internal/timers:466:21)

  2) Проверяем, что каждый элемент пароля соответствует требуемому значению
       Проверяем 1-й элемент на соответствие: fff===uuu:

      AssertionError [ERR_ASSERTION]: 'fff' == 'uuu'
      + expected - actual

      -fff
      +uuu

      at Context.<anonymous> (learning.js:115:20)
      at processImmediate (node:internal/timers:466:21)

  3) Проверяем, что каждый элемент пароля соответствует требуемому значению
       Проверяем 2-й элемент на соответствие: 179===484:

      AssertionError [ERR_ASSERTION]: 179 == 484
      + expected - actual

      -179
      +484

      at Context.<anonymous> (learning.js:115:20)
      at processImmediate (node:internal/timers:466:21)

  4) Проверяем, что каждый элемент пароля соответствует требуемому значению
       Проверяем 3-й элемент на соответствие: 593===848:

      AssertionError [ERR_ASSERTION]: 593 == 848
      + expected - actual

      -593
      +848

      at Context.<anonymous> (learning.js:115:20)
      at processImmediate (node:internal/timers:466:21)

  5) Проверяем, что каждый элемент пароля соответствует требуемому значению
       Проверяем 4-й элемент на соответствие: false===true:

      AssertionError [ERR_ASSERTION]: false == true
      + expected - actual

      -false
      +true

      at Context.<anonymous> (learning.js:115:20)
      at processImmediate (node:internal/timers:466:21)
*/


/*
А вот правильный пример:

Проверяем, что каждый элемент пароля соответствует требуемому значению
    ✔ Проверяем 0-й элемент на соответствие: ooo===ooo
    ✔ Проверяем 1-й элемент на соответствие: uuu===uuu
    ✔ Проверяем 2-й элемент на соответствие: 484===484
    ✔ Проверяем 3-й элемент на соответствие: 848===848
    ✔ Проверяем 4-й элемент на соответствие: true===true


  10 passing (11ms)

  10 тестов - с учетом того, что у меня 2 describe по 5 assert
*/


// А еще имеются сообщение before, after, beforeEach, afterEach
describe ("Тест с пояснениями", function() {
    before(() => console.log("Скрипт к тестированию приступил"));
    after(() => console.log("Скрипт тестирование успешно завершил"));

    beforeEach(() => console.log("Начинаю тестить кейс"));
    afterEach(() => console.log("Тест кейса доделал"));

    it("Тест № 1", () => console.log("***звуки тестирования***"));
    it("Тест № 2", () => console.log("***звуки тестирования***"));
    it("Тест № 3", () => console.log("***звуки тестирования***"));
})

/*
Получаем вывод:

Тест с пояснениями
Скрипт к тестированию приступил
Начинаю тестить кейс
***звуки тестирования***
    ✔ Тест № 1
Тест кейса доделал
Начинаю тестить кейс
***звуки тестирования***
    ✔ Тест № 2
Тест кейса доделал
Начинаю тестить кейс
***звуки тестирования***
    ✔ Тест № 3
Тест кейса доделал
Скрипт тестирование успешно завершил


  13 passing (13ms)
*/


/* 
А еще спецификации describe можно вкладывать друг в друга
Первый describe как основной тест и вложенные - логически разделенные кейсы для тестирования
*/

/*
Можно тестирование проводить прям в html

В один <script> включить тестируемый скрипт
В другой - сами тесты
А после в некоторый блок <div> выводить результаты тестов
*/